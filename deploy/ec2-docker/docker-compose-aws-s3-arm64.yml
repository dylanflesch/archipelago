# Run docker-compose up -d
# Docker file for Arm64 (e.g AWS M6 family) and Apple M1/M2/M3 machines
services:
  web:
    container_name: esmero-web
    image: jonasal/nginx-certbot
    # image: esmero/nginx-bot-blocker:1.1.0-multiarch
    restart: always
    environment:
      CERTBOT_EMAIL: ${ARCHIPELAGO_EMAIL}
      ENVSUBST_VARS: FQDN
      FQDN: ${ARCHIPELAGO_DOMAIN}
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/user_conf.d
      # MSMTP_ACCOUNT: ${MSMTP_ACCOUNT}
      # MSMTP_EMAIL: ${MSMTP_EMAIL}
      # MSMTP_HOST: ${MSMTP_HOST}
      # MSMTP_PASSWORD: ${MSMTP_PASSWORD}
      # MSMTP_PORT: ${MSMTP_PORT}
      # MSMTP_STARTTLS: ${MSMTP_STARTTLS}
      # NGXBLOCKER_CRON: ${NGXBLOCKER_CRON}
      # NGXBLOCKER_CRON_COMMAND: ${NGXBLOCKER_CRON_COMMAND}
      # NGXBLOCKER_CRON_START: ${NGXBLOCKER_CRON_START}
      # NGXBLOCKER_ENABLE: ${NGXBLOCKER_ENABLE}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${ARCHIPELAGO_ROOT}/config_storage/nginxconfig/template:/etc/nginx/templates
      - ${ARCHIPELAGO_ROOT}/drupal:/var/www/html:cached
      - ${ARCHIPELAGO_ROOT}/data_storage/ngnixcache:/var/cache/nginx
      - ${ARCHIPELAGO_ROOT}/data_storage/letsencrypt:/etc/letsencrypt
      # - ${ARCHIPELAGO_ROOT}/config_storage/nginxconfig/bots.d:/etc/nginx/bots.d
    depends_on:
      - solr
      - php
      - db
      - redis
      # - anubis
    tty: true
    networks:
      - host-net
      - esmero-net
  php:
    container_name: esmero-php
    restart: always
    image: "esmero/php-8.3-fpm:1.5.0-multiarch"
    tty: true
    networks:
      - host-net
      - esmero-net
    volumes:
      - ${ARCHIPELAGO_ROOT}/config_storage/php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - ${ARCHIPELAGO_ROOT}/drupal:/var/www/html:cached
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MINIO_BUCKET_MEDIA: ${MINIO_BUCKET_MEDIA}
      MINIO_FOLDER_PREFIX_MEDIA: ${MINIO_FOLDER_PREFIX_MEDIA}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      PHP_MEMORY_LIMIT: ${PHP_MEMORY_LIMIT}
      PHP_CLI_MEMORY_LIMIT: ${PHP_CLI_MEMORY_LIMIT}
  anubis:
    container_name: esmero-anubis
    image: esmero/anubis:multiarch
    environment:
      BIND: ":8969"
      DIFFICULTY: "4"
      METRICS_BIND: ":9090"
      SERVE_ROBOTS_TXT: "true"
      # see https://anubis.techaro.lol/docs/admin/installation/#key-generation
      ED25519_PRIVATE_KEY_HEX: ${ANUBIS_PRIVATE_KEY}
      TARGET: "http://esmero-web:61111"
      REDIRECT_DOMAINS: ${ARCHIPELAGO_DOMAIN}
      POLICY_FNAME: "/data/cfg/botPolicies.yaml"
      OG_PASSTHROUGH: "false"
      OG_EXPIRY_TIME: "24h"
      SLOG_LEVEL: "info"
      #SLOG_LEVEL: "debug"
    ports:
      - 8969:8969
    networks:
      - esmero-net
    volumes:
      - ${ARCHIPELAGO_ROOT}/config_storage/anubisconfig/botPolicies.yaml:/data/cfg/botPolicies.yaml:ro
      - ${ARCHIPELAGO_ROOT}/config_storage/anubisconfig/allow.yaml:/data/cfg/archipelago/allow.yaml:ro
      - ${ARCHIPELAGO_ROOT}/config_storage/anubisconfig/deny.yaml:/data/cfg/archipelago/deny.yaml:ro
  solr:
    container_name: esmero-solr
    restart: always
    image: "solr:9.8.1"
    # If running Docker < 20.10.10 please uncomment the following lines
    # See https://solr.apache.org/guide/solr/latest/upgrade-notes/major-changes-in-solr-9.html#solr-9-2 
    #security_opt:
    #  - seccomp:unconfined
    tty: true
    environment:
      SOLR_HEAP: 1024m
      SOLR_OPTS: -Dsolr.jetty.request.header.size=65535 -Dsolr.install.dir=/opt/solr
      SOLR_MODULES: "extraction,langid,ltr,analysis-extras,scripting"
      SOLR_LOG_LEVEL: "WARN"
    ports:
      - "8983:8983"
    networks:
      - host-net
      - esmero-net
    volumes:
      - ${ARCHIPELAGO_ROOT}/data_storage/solrcore:/var/solr/data
      - ${ARCHIPELAGO_ROOT}/config_storage/solrconfig:/drupalconfig
      - ${ARCHIPELAGO_ROOT}/data_storage/solrlib:/var/solr/data/lib
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - drupal
      - /drupalconfig
  # see https://hub.docker.com/_/mariadb/
  db:
    image: mariadb:10.6.22-focal
    command: mysqld --transaction-isolation=READ-COMMITTED --default-authentication-plugin=mysql_native_password  --skip-log-bin --max_allowed_packet=256M --sort_buffer_size=512K --lower_case_table_names=1 --innodb_read_only_compressed=OFF
    container_name: esmero-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    # Uncomment the next line if upgrading from a previous mariadb version. 1.3.0 shipped with 10.6.12
    # MARIADB_AUTO_UPGRADE: true
    networks:
      - host-net
      - esmero-net
    volumes:
      - ${ARCHIPELAGO_ROOT}/data_storage/db:/var/lib/mysql
  nlp:
    container_name: esmero-nlp
    restart: always
    image: "esmero/esmero-nlp:1.4.2-fasttext-multiarch"
    # ML processing image. Live does not ship with ML configurations. But if you need to
    # evaluate the tools on a Cloud server instead of a local replace previous image with this.
    #image: "esmero/esmero-nlp:1.4.2-arm64"
    #environment:
      #MOBILENET_MODEL_NAME: mobilenet_v3_large.tflite
    ports:
      - "6400:6400"
    networks:
      - host-net
      - esmero-net
  iiif:
    container_name: esmero-cantaloupe
    image: "esmero/cantaloupe-s3:6.0.5-noturbojpeg-multiarch"
    # If you need to use TurboJPEG you can swap this image for the next tile
    # image: "esmero/cantaloupe-s3:6.0.5-multiarch"
    restart: always
    ports:
      - "8183:8182"
    networks:
      - host-net
      - esmero-net
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      CACHE_SERVER_DERIVATIVE: S3Cache
      S3SOURCE_BASICLOOKUPSTRATEGY_BUCKET_NAME: ${MINIO_BUCKET_MEDIA}
      S3SOURCE_BASICLOOKUPSTRATEGY_PATH_PREFIX: ${MINIO_FOLDER_PREFIX_MEDIA}
      S3CACHE_BUCKET_NAME: ${MINIO_BUCKET_CACHE}
      S3CACHE_OBJECT_KEY_PREFIX: ${MINIO_FOLDER_PREFIX_CACHE}
      XMS: 2g
      XMX: 8g
      JAVA_OPS: -XX:+UseZGC
    volumes:
      - ${ARCHIPELAGO_ROOT}/config_storage/iiifconfig:/etc/cantaloupe
      - ${ARCHIPELAGO_ROOT}/data_storage/iiifcache:/var/cache/cantaloupe
      - ${ARCHIPELAGO_ROOT}/data_storage/iiiftmp:/var/cache/cantaloupe_tmp
  minio:
    container_name: esmero-minio
    restart: always
    image: minio/minio:RELEASE.2022-06-11T19-55-32Z
    volumes:
      - ${ARCHIPELAGO_ROOT}/data_storage/minio-data:/data:cached
    # If you are using a Native Cloud Storage you can gain performance by not using min.io
    # at all. Recommended only for Local Drives to S3 or for non native S3 (e.g Azure) routing 
    # Uncomment for min.io level cache  - /mnt/data/cache:/cache
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - host-net
      - esmero-net
    environment:
      MINIO_HTTP_TRACE: /tmp/minio-log.txt
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      # MINIO_CACHE_DRIVES: /cache
      # MINIO_CACHE_EXCLUDE: "*.json,*.jpg,*.jpeg"
      # MINIO_CACHE_QUOTA: 80
      # MINIO_CACHE_RANGE: "off"
      # MINIO_CACHE_AFTER: 3
      # MINIO_CACHE_WATERMARK_LOW: 70
      # MINIO_CACHE_WATERMARK_HIGH: 90
    command: gateway s3 https://s3.amazonaws.com/ --console-address ":9001"
  redis:
    container_name: esmero-redis
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: >
      --requirepass ${REDIS_PASSWORD}
      --save ""
      # To allow Redis to write caches every 20 seconds, and reload on restart, uncomment the following line and comment the previous one out.
      # --save 20 1
      --loglevel warning
      --maxmemory-policy allkeys-lru
      --maxmemory 2gb
    networks:
      - esmero-net
    volumes:
      - redis-cache:/data
networks:
  host-net:
    driver: bridge
  esmero-net:
    driver: bridge
    internal: true
volumes:
  redis-cache:
    driver: local
